#!/usr/bin/env php -d memory_limit=102M
<?php
/**************************************************************
*   __ ____ ____ ______ ______ _____ _      ______  _____     *
*  /_ |___ \___ \____  |  ____|_   _| |    |  ____|/ ____|    *
*   | | __) |__) |  / /| |__    | | | |    | |__  | (___      *
*   | ||__ <|__ <  / / |  __|   | | | |    |  __|  \___ \     *
*   | |___) |__) |/ /  | |     _| |_| |____| |____ ____) |    *
*   |_|____/____//_/   |_|    |_____|______|______|_____/     *
*   ______ ______ ______ ______ ______ ______ ______ ______   *
*  |______|______|______|______|______|______|______|______|  *
*                                                             *
***************************************************************/
define("version",2.0);
define("tool","leetfiles-cli");
define("usage","\033[31m" . tool . " v" . version . "\033[0m\n\033[32mUsage:\033[0m\n\033[36m" .$argv[0] ."\033[0m [[-r,--register <username>] [-a, --activate <username> <serial>], [-h, --help], [-v, --version]] [language=]<file> [[language=]<file2>] [[language=]<file>3] ...\033[32m uploads each file to leetfiles.com with automatic file / image detection.\nIf language is specified a paste is being done and language is used for the syntax highligter.\033[0m\n\n\033[33mExamples:\033[0m\n\033[36m{$argv[0]}\033[0m \033[32mfi.le\033[0m uploads fi.le as an image\n\033[36m{$argv[0]}\033[0m \033[32m/an/image.png\033[0m uploads image.png as image\n\033[36m{$argv[0]}\033[0m \033[32mphp=anscript.php plain=plain.txt\033[0m pastes anscript.php with php as language and plain.txt\n\033[36m{$argv[0]}\033[0m \033[32m-r <USERNAME>\033[0m registers the user <USERNAME> to this computer\n\033[36m{$argv[0]}\033[0m \033[32m-a <USERNAME> <SERIAL>\033[0m verifies the registration of <USERNAME> with a serial sent by email\n\n\033[36m" .$argv[0] . "\033[0m -v,--version \033[32mprints the " . tool . " version\033[0m\n\033[36m" .$argv[0] . "\033[0m -r,--register \033[32mregisters this computer to your leetfiles account\033[0m\n\033[36m" .$argv[0] . "\033[0m -a,--activate \033[32mactivates a registration with an serial number sent by email\033[0m\n\n\033[36m" .$argv[0] . "\033[0m -h,--help \033[32mshows this help\033[0m\n");
define("confdir",$_SERVER['HOME'] . DIRECTORY_SEPARATOR . ".conf");
define("conffile",confdir . DIRECTORY_SEPARATOR . "leetfiles");
$finfo = finfo_open(FILEINFO_MIME_TYPE);

if($argc < 2) {die(usage);}
if($argv[1] == "-v" || $argv[1] == "--version"){ die("\033[31mleetfiles-cli v" . version . "\033[0m\n");}
if($argv[1] == "-h" || $argv[1] == "--help") {die(usage);}


if (!function_exists('curl_file_create'))
{
  function curl_file_create($filename, $mimetype = '', $postname = '')
  {
    return "@$filename;filename=" . ($postname ?: basename($filename)) . ($mimetype ? ";type=$mimetype" : '');
  }
}
if(!is_dir(confdir)) {mkdir(confdir);}

if($argv[1] == "--register" || $argv[1] == "-r")
{
  $nick = $argv[2];
  if(strlen($nick) < 1 || !ctype_alnum(str_replace(array("-","_"), '', $nick)))
  {
    die("\033[31mERROR: Not a valid username\033[0m\n");
  }
  echo "\033[33mRegistering " . tool . " to {$nick}...\033[0m\n";
  $regstat = post("http://leetfiles.com/registerapp?user={$nick}",NULL,false);
  if($regstat == "true")
  {
    echo "\033[32mAlright! Please check your email for verification.\033[0m\n";
  }
  else
  {
    echo "\033[31mError: invalid response. Does the user exist?\033[0m\n";
  }
  exit;
}

if($argv[1] == "--activate" || $argv[1] == "-a")
{
  $nick = $argv[2];
  $serial = $argv[3];
  if(strlen($nick) < 1 || !ctype_alnum(str_replace(array("-","_"), '', $nick))) {die("\033[31mERROR: Not a valid username\033[0m\n");}
  if(strlen($serial) < 1 || !ctype_alnum(str_replace(array("-","_"), '', $nick))) {die("\033[31mERROR: Username and / or serial number is missing\033[0m\n");}
  echo "\033[33mVerifying...\033[0m\n";
  $status = post("http://leetfiles.com/activateapp.php?username={$nick}&serial={$serial}",NULL,false);
  //var_dump($status);
  if($status == "true")
  {
    $reg = Array("verified" => true,"serial" => $serial);
    file_put_contents(conffile,json_encode($reg));
    die("\033[32mAlright, {$nick} is now registered to this computer.\033[0m\n");
  }
  else
  {
    die("\033[31mERROR: Not a valid serial number\033[0m\n");
  }
}

for($i = 1;$i<sizeof($argv);$i++)
{
  $file = $argv[$i];
  $type = explode("=",$file);
  if(sizeof($type) > 1) {$file = $type[1];} // everything to use less brackets.... unnecessary.
  $type = (sizeof($type) > 1) ? $type[0] : "file";
  if(!file_exists($file)) {die("\033[31mERROR: {$file} doesn't exist. Exiting...\033[0m \n");}
  if(is_dir($file)){die("\033[31mERROR: {$file} is a directory. Exiting...\033[0m \n");}
  $mime = finfo_file($finfo, $file);
  $m = substr($mime,0,5); // text/ is text and image is image
  $ext = getextension($file);
  $size = filesize($file);
  $fsize = formatsize($size);
  $filen = basename($file);
  if($type != "file" && $m != "text/")
  {
    echo "\033[31mWarning: \033[0m{$file} isn't a textfile. Are you sure you want to paste it?\nType yes to continue: ";
    if(stdin() != "yes"){ die("Abort.\n");}
  }
  if($m == "image")
  {
    if(!in_array($ext,Array("jpg","jpeg","png","gif"))) {die("\033[31mERROR: Image extension {$ext} not supported by leetfiles.com. Exiting.\033[0m\n");}
    if($size > 10485760) {die("\033[31mERROR: the size of {$filen} is {$fsize} which is more than the allowed 10 MiB for images. Exiting.\033[0m\n");}
    $data = array('file' => curl_file_create($file));
    echo "\033[33mUploading {$filen}...\033[0m\n";
    echo "\033[32m" . substr(post("http://www.leetfiles.com/image-upload.php?serial=" . serial(),$data),67,-4) . "\033[0m\n";
  }
  elseif($type == "file")
  {
    if($size > 104857600) {die("\033[31mERROR: the size of {$filen} is {$fsize} which is more than the allowed 100 MiB for files. Exiting.\033[0m\n");}
    $data = array('file' => curl_file_create($file));
    echo "\033[33mUploading {$filen}...\033[0m\n";
    echo "\033[32m" . substr(post("http://www.leetfiles.com/upload.php?serial=" . serial(),$data),66,-4) . "\033[0m\n";
  }
  else
  {
    if($type == "plain") {$type = "no-highlight";}
    echo "\033[33mPasting {$filen}...\033[0m\n";
    echo "\033[32m" . substr(post("http://www.leetfiles.com/code-upload.php?serial=" . serial(),"codepaste=" . urlencode(file_get_contents($file)) . "&language={$type}"),63,-4) . "\033[0m\n";
  }

  //echo "File: {$file} type: {$type} Mimetype: {$mime} Extension: {$ext}\n";
}
finfo_close($finfo);
function stdin()
{
  $handle = fopen ("php://stdin","r");
  $text = strtolower(str_replace("\n","",fgets($handle)));
  fclose($handle);
  return $text;
}
function getextension($file,$split = false)
{
  $extension = explode(".",$file);
  $asize = sizeof($extension);
  $ext = strtolower($extension[$asize-1]);
  if(!$split)
  {
    return $ext;
  }
  else
  {
    unset($extension[$asize-1]);
    return array($ext,implode(".",$extension));
  }
}
  function post($url,$data,$post = true)
  {
    $ch = curl_init( $url );
    curl_setopt( $ch, CURLOPT_FOLLOWLOCATION, true );
    curl_setopt( $ch, CURLOPT_HEADER, false );
    curl_setopt( $ch, CURLOPT_RETURNTRANSFER, true );
    if($post)
    {
      curl_setopt($ch,CURLOPT_POST, true);
      curl_setopt($ch,CURLOPT_POSTFIELDS, $data);
    }
    curl_setopt( $ch, CURLOPT_BINARYTRANSFER, true);
    curl_setopt($ch,CURLOPT_TIMEOUT,60*60*24);
    curl_setopt( $ch, CURLOPT_USERAGENT, "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:31.0) Gecko/20100101 Firefox/31.0");
    $restext = curl_exec( $ch );
    curl_close( $ch );
    return $restext;
  }
function formatsize($size)
{
  if($size > 1024 * 1024 * 1024)
  {
    return round($size / 1024 / 1024 / 1024,2) . " GiB";
  }
  elseif($size > 1024 * 1024)
  {
    return round($size / 1024 / 1024,2) . " MiB";
  }
  elseif($size > 1024)
  {
    return round($size / 1024,2) . " KiB";
  }
  elseif($size < 1024)
  {
    return "{$size} Bytes";
  }
}
function serial()
{
  if(!file_exists(conffile)){return "";}
  $json = o2a(json_decode(file_get_contents(conffile)));
  if($json['verified'] != true){return "";}
  if(strlen($json['serial']) != 32) {return "";}
  return $json['serial'];
}
function o2a($d) {if (is_object($d)) {$d = get_object_vars($d);}if (is_array($d)) {return array_map(__FUNCTION__, $d);}else {return $d;}}
?>
